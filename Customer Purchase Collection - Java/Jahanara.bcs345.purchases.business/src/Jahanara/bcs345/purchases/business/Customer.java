package Jahanara.bcs345.purchases.business;

import java.io.PrintStream;
import java.util.Scanner;
/**
 * The Customer class contains it's member variables and the definitions for it's default constructor, 
 * Get/Set methods, Write method, Read method, GetJSON method and an overridden toString method.
 * The Customer class also reuses code by calling the Read, Write, GetJSON and overridden toString methods 
 * of the Address class within it's own Read, Write, GetJSON and overridden toString methods.
 * 
 * @author Niki Jahanara
 * @version 1.0
 * @since 10/23/2016
 */
public class Customer {
	
	// Declaring the private member variables.
	private String First;
	private String Last;
	private Address address;
	
	/**
	* This method is the default constructor for the Customer class.
	*/
	public Customer()
	{
		First = "John";
		Last = "Smith";
		// Calling new on the instance of Address
		address = new Address();
	}

	/**
	 * The getFirst method returns the value of the First member variable.
	 * @return First The value of the First member variable.
	 */
	public String getFirst() { return First; }
	/**
	 * The getLast method returns the value of the Last member variable.
	 * @return Last The value of the Last member variable.
	 */
	public String getLast() { return Last; }
	/**
	 * The getAddress method returns the values of Address's member variables.
	 * @return address The instance of Address containing the values of Address's member variables.
	 */
	public Address getAddress() { return address; }

	/**
	 * The setFirst method assigns the value passed into it as the value for the First member variable.
	 * @param newFirst The new value for the First member variable.
	 */
	public void setFirst(String newFirst) { First = newFirst; }
	/**
	 * The setLast method assigns the value passed into it as the value for the Last member variable.
	 * @param newLast The new value for the Last member variable.
	 */
	public void setLast(String newLast) { Last = newLast; }
	/**
	 * The setAddress method assigns the values of the member variables of 
	 * the instance of Address passed into it as the value for the member variables of Address instance address.
	 * @param newAddress The new values for the Address member variables.
	 */
	public void setAddress(Address newAddress) { address = newAddress; }
	
	/**
	 * The Write method prints the values of the Customer class's member variables to
	 * a file by passing an instance of PrintStream into the method's parameter.
	 * The class also prints the values of the Address class's member variables to the
	 * same file by passing the instance of PrintStream to a call of Address's Write method.
	 * @param ps The instance of PrintStream.
	 */
	public void Write(PrintStream ps)
	{
		//***********************************************************
		// Each format specifier is followed by a newline sequence
		// so that each member variable's value is printed onto a new line
		// in the output file generated by the method.
		//***********************************************************
		ps.printf("%s\n%s\n", First, Last);
		address.Write(ps);
	}
	
	/**
	 * The Read method is passed an instance of Scanner in order
	 * to assign the values it reads on each line of the file, that the
	 * Write method generated, to each of the Customer class's member variables.
	 * The instance of Scanner is also passed into Address's Read method in
	 * order to assign the address data in the file to it's member variables.
	 * @param s The instance of Scanner.
	 */
	public void Read(Scanner s) 
	{
		//*******************************************************
		// Scanner's nextLine() method reads an entire line, which is important
		// because the Read method will read values that have each
		// been printed onto a new line by the Write method.
		//*******************************************************
		First = s.nextLine();
		Last = s.nextLine();
		address.Read(s);
	}
	
	/**
	 * The GetJSON method returns a concatenated string that
	 * formats the values of the member variables of Customer and Address into JSON format.
	 * Address's GetJSON method is called in order to include the Address class's JSON
	 * within the Customer class's JSON method.
	 * @return s Which contains the concatenated JSON string.
	 */
	public String GetJSON() 
	{
		//*****************************************************************
		// Formatting each string before it is concatenated so that the method
		// returns each line stored in string s in the correct JSON format.
		//*****************************************************************
		String s = String.format("{\n\t\"%-5s\" %3s \"%s\", \n", "first", ":", First);
		s = s + String.format("\t\"%-4s\" %4s \"%s\", \n", "last", ":", Last);
		s = s + String.format("\t\"%s\" %s\n", "address", ":");
		s = s + address.GetJSON();
		s = s + String.format("\n%s", "}");
		
		return s;
	}
	
	/**
	 * The overridden toString method returns the 
	 * Customer and Address member variable's values in a formatted string.
	 * The Address class's toString method is also called in order for the 
	 * complete customer and address information to be returned by the method.
	 * @return s Which contains the values of the member variables in a formatted string.
	 */
	@Override
	public String toString()
	{
		//********************************************
		// Formatting string s so that it returns each
		// value of the customer and address information in the correct format.
		//********************************************
		String s = String.format("%s %s\n", First, Last);
		s = s + address.toString();
		
		return s;
	}
}
